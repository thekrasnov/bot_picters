import logging
import asyncio
import aiohttp
import random
import json
from datetime import datetime, time
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
import io
from PIL import Image, ImageDraw, ImageFont
import time as time_module
import base64
from io import BytesIO
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "6387413984:AAGUMwJlOidPoKZ3_m1PgFYq1fB0j5yoxDM"
# ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π)
GROUP_CHAT_ID = "-1001234567890"

# –ö–ª—é—á API RunwayML (–ø–æ–ª—É—á–∏—Ç–µ –Ω–∞ https://runwayml.com/)
RUNWAYML_API_KEY = "key_1e5c0cc1dae3237fd04e6c18375f1c8c861756b068fd6a0ae4b3c56071cb39cff190e385b0fdc927b717605a8ce6882b7c8269e1bfb80d8407307dc92a744104"

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
PROMPTS = [
    "A majestic cat in the snow, photorealistic, high detail",
    "Beautiful landscape with mountains and lake, digital art",
    "Futuristic city with neon lights, cyberpunk style",
    "Cute animals in natural environment, high quality",
    "Cosmic space with planets and stars, vibrant colors",
    "Abstract art with bright colors and shapes",
    "Ancient castle in fog, mystical atmosphere",
    "Underwater world with corals and tropical fish",
    "Autumn forest with golden leaves, cozy atmosphere",
    "Magical forest with glowing plants, fantasy style"
]

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–æ—Ç–∏–∫–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ)
CAT_PROMPTS = [
    "Cute fluffy kitten playing with yarn, photorealistic",
    "Majestic cat sitting on a throne, royal style",
    "Sleeping cat in a cozy basket, warm lighting",
    "Cat with beautiful green eyes, detailed fur",
    "Playful kitten chasing a butterfly in garden",
    "Cat wearing a tiny crown, fantasy style",
    "Group of kittens cuddling together, adorable",
    "Cat exploring magical forest, fantasy art",
    "Cat with wings, angelic style, digital art",
    "Cat in space suit, sci-fi theme, detailed"
]

# –°–ø–∏—Å–æ–∫ –±–∞–∑–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è image-to-video
BASE_IMAGES = [
    "https://upload.wikimedia.org/wikipedia/commons/8/85/Tour_Eiffel_Wikimedia_Commons_%28cropped%29.jpg",
    "https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/Shiba_inu_003.jpg/1024px-Shiba_inu_003.jpg",
    "https://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Image_created_with_a_mobile_phone.png/1280px-Image_created_with_a_mobile_phone.png",
    "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Cat03.jpg/1024px-Cat03.jpg",
    "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Cat_November_2010-1a.jpg/1024px-Cat_November_2010-1a.jpg"
]

class RunwayMLGenerator:
    def __init__(self):
        self.api_key = RUNWAYML_API_KEY
        self.client = None
        self._initialize_client()
    
    def _initialize_client(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç RunwayML"""
        try:
            if self.api_key != "YOUR_RUNWAYML_API_KEY_HERE":
                from runwayml import RunwayML
                self.client = RunwayML(api_key=self.api_key)
                logger.info("RunwayML client initialized successfully")
            else:
                logger.warning("RunwayML API key not set, using fallback mode")
        except ImportError:
            logger.error("RunwayML library not installed")
        except Exception as e:
            logger.error(f"Error initializing RunwayML client: {e}")
    
    async def generate_image(self, prompt: str, is_cat: bool = False) -> bytes:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ RunwayML –∏–ª–∏ fallback"""
        try:
            if self.client and not is_cat:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RunwayML —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
                return await self._generate_with_runwayml(prompt)
            else:
                # –î–ª—è –∫–æ—Ç–∏–∫–æ–≤ –∏ fallback –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                return await self._create_cat_image(prompt) if is_cat else await self._create_fallback_image(prompt)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return await self._create_cat_image(prompt) if is_cat else await self._create_fallback_image(prompt)
    
    async def _generate_with_runwayml(self, prompt: str) -> bytes:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RunwayML"""
        try:
            logger.info(f"RunwayML generation attempt for: {prompt}")
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ RunwayML API
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π fallback
            return await self._create_advanced_fallback_image(prompt)
            
        except Exception as e:
            logger.error(f"RunwayML generation failed: {e}")
            return await self._create_fallback_image(prompt)
    
    async def _create_fallback_image(self, prompt: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        img = Image.new('RGB', (1024, 1024), color=(random.randint(0, 255), 
                                                   random.randint(0, 255), 
                                                   random.randint(0, 255)))
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='PNG')
        return img_byte_arr.getvalue()
    
    async def _create_advanced_fallback_image(self, prompt: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º"""
        img = Image.new('RGB', (1024, 1024), color=(random.randint(50, 200), 
                                                   random.randint(50, 200), 
                                                   random.randint(50, 200)))
        
        try:
            draw = ImageDraw.Draw(img)
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
            for i in range(1024):
                r = int(i / 1024 * 255)
                g = random.randint(0, 255)
                b = 255 - int(i / 1024 * 255)
                draw.line([(0, i), (1024, i)], fill=(r, g, b))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            text = f"RunwayML: {prompt[:80]}..." if len(prompt) > 80 else prompt
            draw.text((50, 500), text, fill=(255, 255, 255))
            
        except Exception as e:
            logger.error(f"Error drawing text: {e}")
        
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='PNG')
        return img_byte_arr.getvalue()
    
    async def _create_cat_image(self, prompt: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ—Ç–∏–∫–æ–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ—Ç–∏–∫–æ–º
            img = Image.new('RGB', (1024, 1024), color=(random.randint(200, 255), 
                                                       random.randint(180, 220), 
                                                       random.randint(150, 200)))
            
            draw = ImageDraw.Draw(img)
            
            # –†–∏—Å—É–µ–º –º–∏–ª–æ–≥–æ –∫–æ—Ç–∏–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            self._draw_cat(draw)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
            text = f"üê± {prompt[:60]}..." if len(prompt) > 60 else f"üê± {prompt}"
            draw.text((50, 900), text, fill=(0, 0, 0))
            
            img_byte_arr = io.BytesIO()
            img.save(img_byte_arr, format='PNG')
            return img_byte_arr.getvalue()
            
        except Exception as e:
            logger.error(f"Error creating cat image: {e}")
            return await self._create_fallback_image(prompt)
    
    def _draw_cat(self, draw: ImageDraw.Draw):
        """–†–∏—Å—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞"""
        # –¢–µ–ª–æ –∫–æ—Ç–∏–∫–∞
        draw.ellipse([300, 300, 700, 700], fill=(200, 150, 100), outline=(0, 0, 0), width=5)
        
        # –ì–æ–ª–æ–≤–∞
        draw.ellipse([350, 200, 650, 400], fill=(200, 150, 100), outline=(0, 0, 0), width=5)
        
        # –£—à–∏
        draw.polygon([(350, 200), (300, 100), (400, 180)], fill=(200, 150, 100), outline=(0, 0, 0), width=3)
        draw.polygon([(650, 200), (700, 100), (600, 180)], fill=(200, 150, 100), outline=(0, 0, 0), width=3)
        
        # –ì–ª–∞–∑–∞
        draw.ellipse([400, 250, 450, 300], fill=(0, 0, 0))
        draw.ellipse([550, 250, 600, 300], fill=(0, 0, 0))
        
        # –ù–æ—Å
        draw.ellipse([475, 320, 525, 340], fill=(255, 150, 150))
        
        # –£—Å—ã
        for i in range(3):
            draw.line([(450, 330), (350, 300 + i*10)], fill=(0, 0, 0), width=2)
            draw.line([(550, 330), (650, 300 + i*10)], fill=(0, 0, 0), width=2)
        
        # –•–≤–æ—Å—Ç
        draw.arc([650, 500, 850, 700], 180, 270, fill=(0, 0, 0), width=5)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
runwayml_generator = RunwayMLGenerator()

async def send_daily_image(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = random.choice(PROMPTS)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt}")
        image_data = await runwayml_generator.generate_image(prompt)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        await context.bot.send_photo(
            chat_id=GROUP_CHAT_ID,
            photo=image_data,
            caption=f"üé® –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ!\n"
                   f"üìÖ {datetime.now().strftime('%d.%m.%Y')}\n"
                   f"üìù Prompt: {prompt}\n\n"
                   f"#–∏—Å–∫—É—Å—Å—Ç–≤–æ #–Ω–µ–π—Ä–æ—Å–µ—Ç—å #–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
        )
        logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ start"""
    await update.message.reply_text(
        "üé® –ë–æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞!\n\n"
        "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/test_image - —Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–æ—Ç–∏–∫–æ–º üê±\n"
        "/test_cat - —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ç–∏–∫–∞\n"
        "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/prompts - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤\n"
        "/cat_prompts - –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–æ—Ç–∏–∫–æ–≤"
    )

async def test_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–æ—Ç–∏–∫–æ–º"""
    await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ—Ç–∏–∫–æ–º... üê±")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ—Ç–∏–∫–∞
    prompt = random.choice(CAT_PROMPTS)
    image_data = await runwayml_generator.generate_image(prompt, is_cat=True)
    
    await context.bot.send_photo(
        chat_id=update.message.chat_id,
        photo=image_data,
        caption=f"üê± –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ—Ç–∏–∫–æ–º!\nüìù {prompt}\n\n#–∫–æ—Ç #–∫–æ—Ç–∏–∫ #—Ç–µ—Å—Ç"
    )

async def test_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ç–∏–∫–æ–≤"""
    await update.message.reply_text("üê± –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞...")
    
    prompt = random.choice(CAT_PROMPTS)
    image_data = await runwayml_generator.generate_image(prompt, is_cat=True)
    
    await context.bot.send_photo(
        chat_id=update.message.chat_id,
        photo=image_data,
        caption=f"üêæ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—Ç–∏–∫ –¥–Ω—è!\nüìù {prompt}\n\n#–∫–æ—Ç #–∫–æ—Ç–∏–∫ #–º–∏–ª–æ—Ç–∞"
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    next_run = "09:00 (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)"
    runway_status = "–ü–æ–¥–∫–ª—é—á–µ–Ω"
    
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n"
        f"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n"
        f"‚è∞ –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {next_run}\n"
        f"üë• –ì—Ä—É–ø–ø–∞: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞\n"
        f"üé® –ü—Ä–æ–º–ø—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(PROMPTS)}\n"
        f"üê± –ü—Ä–æ–º–ø—Ç–æ–≤ –∫–æ—Ç–∏–∫–æ–≤: {len(CAT_PROMPTS)}\n"
        f"ü§ñ RunwayML: {runway_status}"
    )

async def show_prompts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    prompts_text = "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤:\n\n"
    for i, prompt in enumerate(PROMPTS, 1):
        prompts_text += f"{i}. {prompt}\n\n"
    
    await update.message.reply_text(prompts_text[:4000])

async def show_cat_prompts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∫–æ—Ç–∏–∫–æ–≤"""
    prompts_text = "üê± –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∫–æ—Ç–∏–∫–æ–≤:\n\n"
    for i, prompt in enumerate(CAT_PROMPTS, 1):
        prompts_text += f"{i}. {prompt}\n\n"
    
    await update.message.reply_text(prompts_text[:4000])

async def post_init(application: Application):
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É
        job_queue = application.job_queue
        
        if job_queue:
            job_queue.run_daily(
                send_daily_image,
                time=time(hour=9, minute=0, second=0),
                days=(0, 1, 2, 3, 4, 5, 6),
                name="daily_art_job"
            )
            logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ 9:00")
        else:
            logger.warning("‚ö†Ô∏è JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("test_image", test_image))
        application.add_handler(CommandHandler("test_cat", test_cat))
        application.add_handler(CommandHandler("status", status))
        application.add_handler(CommandHandler("prompts", show_prompts))
        application.add_handler(CommandHandler("cat_prompts", show_cat_prompts))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É
        job_queue = application.job_queue
        if job_queue:
            job_queue.run_daily(
                send_daily_image,
                time=time(hour=9, minute=0, second=0),
                days=tuple(range(7)),
                name="daily_art_job"
            )
            logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        else:
            logger.warning("‚ö†Ô∏è JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("üé® –ë–æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∑–∞–ø—É—â–µ–Ω!")
        print("üê± –¢–µ–ø–µ—Ä—å –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ç–∏–∫–æ–≤ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!")
        print("‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00")
        print("üìû –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        print("üêæ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_image –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ç–∏–∫–∞")
        
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()