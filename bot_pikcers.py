import logging
import random
import asyncio
import aiohttp
import json
from datetime import datetime, time
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
import io
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_TOKEN = "6387413984:AAGUMwJlOidPoKZ3_m1PgFYq1fB0j5yoxDM"
NEUROIMG_API_KEY = "3747955d-f4e0-4dc4-b11a-941c6e08bb5d"
NEUROIMG_API_URL = "https://api.neuroimg.art/v1/generate"

# ID –≥—Ä—É–ø–ø—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π!)
GROUP_CHAT_ID = "-1002592721236"

# –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
POST_TIME = time(hour=9, minute=0)  # 09:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –°–ø–∏—Å–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
PROMPTS = [
    "Beautiful landscape with mountains and lake, 4k, photorealistic",
    "Futuristic city with neon lights, cyberpunk style, detailed",
    "Cute animals in natural environment, high quality, vibrant colors",
    "Cosmic space with planets and stars, nebula, vibrant colors",
    "Abstract art with bright colors and shapes, digital painting",
    "Ancient castle in fog, mystical atmosphere, fantasy art",
    "Underwater world with corals and tropical fish, clear water",
    "Autumn forest with golden leaves, cozy atmosphere, sunlight",
    "Magical forest with glowing plants, fantasy style, enchanting",
    "Mountain waterfall in sunny day, nature, peaceful"
]

CAT_PROMPTS = [
    "Cute fluffy kitten playing with yarn, photorealistic, detailed fur",
    "Majestic cat sitting on a throne, royal style, beautiful eyes",
    "Sleeping cat in a cozy basket, warm lighting, peaceful",
    "Cat with beautiful green eyes, detailed fur, high quality",
    "Playful kitten chasing a butterfly in garden, happy, vibrant colors"
]

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_sent_time = None
sent_count = 0
current_job = None

class NeuroImageGenerator:
    def __init__(self, api_key):
        self.api_key = api_key
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
    
    async def generate_image(self, prompt: str) -> bytes:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ NeuroImg API"""
        try:
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt}")
            
            payload = {
                "prompt": prompt,
                "width": 1024,
                "height": 1024,
                "steps": 20,
                "cfg_scale": 7.5,
                "sampler": "Euler",
                "seed": random.randint(0, 999999999),
                "model": "stable-diffusion-xl",
                "negative_prompt": "blurry, low quality, distorted, ugly, bad anatomy"
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    NEUROIMG_API_URL,
                    headers=self.headers,
                    json=payload,
                    timeout=60
                ) as response:
                    
                    if response.status == 200:
                        result = await response.json()
                        if result.get("status") == "success" and result.get("data"):
                            image_data = result["data"].get("image")
                            if image_data:
                                # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                if image_data.startswith('data:image'):
                                    image_data = image_data.split(',')[1]
                                return base64.b64decode(image_data)
                    
                    logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}")
                    return await self._create_fallback_image(prompt)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ NeuroImg: {e}")
            return await self._create_fallback_image(prompt)
    
    async def _create_fallback_image(self, prompt: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        try:
            from PIL import Image, ImageDraw
            img = Image.new('RGB', (512, 512), color=(
                random.randint(50, 200),
                random.randint(50, 200), 
                random.randint(50, 200)
            ))
            draw = ImageDraw.Draw(img)
            for i in range(512):
                r = int(i / 512 * 255)
                g = random.randint(0, 255)
                b = 255 - int(i / 512 * 255)
                draw.line([(0, i), (512, i)], fill=(r, g, b), width=1)
            img_byte_arr = io.BytesIO()
            img.save(img_byte_arr, format='PNG')
            return img_byte_arr.getvalue()
        except ImportError:
            return b''

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
image_generator = NeuroImageGenerator(NEUROIMG_API_KEY)

async def send_daily_image(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    global last_sent_time, sent_count
    
    try:
        if GROUP_CHAT_ID == "-1001234567890":
            logger.error("‚ùå ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return
        
        logger.info(f"üïí –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É {GROUP_CHAT_ID}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = random.choice(PROMPTS + CAT_PROMPTS)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_data = await image_generator.generate_image(prompt)
        
        if image_data:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            await context.bot.send_photo(
                chat_id=GROUP_CHAT_ID,
                photo=image_data,
                caption=f"üé® –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ!\n"
                       f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                       f"üìù {prompt}\n\n"
                       f"#–Ω–µ–π—Ä–æ—Å–µ—Ç—å #–∏—Å–∫—É—Å—Å—Ç–≤–æ #–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            last_sent_time = datetime.now()
            sent_count += 1
            
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    welcome_text = f"""
üé® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NeuroArt –ë–æ—Ç!*

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç—å NeuroImg.art –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –û—Ç–ø—Ä–∞–≤–æ–∫: {sent_count}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è: {last_sent_time.strftime('%d.%m.%Y %H:%M') if last_sent_time else '–ù–∏–∫–æ–≥–¥–∞'}
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {POST_TIME.strftime('%H:%M')}

*üìã –ö–æ–º–∞–Ω–¥—ã:*
/test - –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
/cat - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ç–∏–∫–∞
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/set_time - –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
/chat_id - –ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞
/set_group - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã
/daily - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def test_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
    await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ NeuroImg...")
    
    prompt = random.choice(PROMPTS)
    image_data = await image_generator.generate_image(prompt)
    
    if image_data:
        await context.bot.send_photo(
            chat_id=update.message.chat_id,
            photo=image_data,
            caption=f"üñº NeuroImg —Ç–µ—Å—Ç\nüìù {prompt}"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

async def generate_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ç–∏–∫–∞"""
    await update.message.reply_text("üê± –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ NeuroImg...")
    
    prompt = random.choice(CAT_PROMPTS)
    image_data = await image_generator.generate_image(prompt)
    
    if image_data:
        await context.bot.send_photo(
            chat_id=update.message.chat_id,
            photo=image_data,
            caption=f"üêæ NeuroImg –∫–æ—Ç–∏–∫\nüìù {prompt}"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ç–∏–∫–∞")

async def force_daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"""
    try:
        if GROUP_CHAT_ID == "-1001234567890":
            await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return
        
        await update.message.reply_text("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞...")
        await send_daily_image(context)
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def set_post_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    global POST_TIME, current_job
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è: /set_time –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: /set_time 09:30")
        return
    
    try:
        time_str = context.args[0]
        hours, minutes = map(int, time_str.split(':'))
        
        if not (0 <= hours < 24 and 0 <= minutes < 60):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        POST_TIME = time(hour=hours, minute=minutes)
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º job —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        job_queue = context.application.job_queue
        if job_queue and current_job:
            current_job.schedule_removal()
        
        current_job = job_queue.run_daily(
            send_daily_image,
            time=POST_TIME,
            days=tuple(range(7)),
            name="daily_art_job"
        )
        
        await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}")
        logger.info(f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {time_str}")
        
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: /set_time 09:30")

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    settings_text = f"""
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:*

‚Ä¢ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: `{POST_TIME.strftime('%H:%M')}`
‚Ä¢ ID –≥—Ä—É–ø–ø—ã: `{'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if GROUP_CHAT_ID != '-1001234567890' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`
‚Ä¢ –ù–µ–π—Ä–æ—Å–µ—Ç—å: `NeuroImg.art`
‚Ä¢ API –∫–ª—é—á: `{'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if NEUROIMG_API_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`

*–ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫:*
/set_time –ß–ß:–ú–ú - –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
/set_group ID - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã
    """
    await update.message.reply_text(settings_text, parse_mode='Markdown')

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞"""
    chat_info = f"""
üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:*

‚Ä¢ ID: `{update.message.chat_id}`
‚Ä¢ –¢–∏–ø: `{update.message.chat.type}`
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: `{update.message.chat.title or '–õ–∏—á–Ω—ã–π —á–∞—Ç'}`

üí° *–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä—É–ø–ø—ã:*
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
2. –ù–∞–ø–∏—à–∏—Ç–µ `/chat_id` –≤ –≥—Ä—É–ø–ø–µ
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –≥—Ä—É–ø–ø—ã
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/set_group ID_–≥—Ä—É–ø–ø—ã`
    """
    await update.message.reply_text(chat_info, parse_mode='Markdown')

async def set_group_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã"""
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã: /set_group <group_id>")
        return
    
    global GROUP_CHAT_ID
    GROUP_CHAT_ID = context.args[0]
    await update.message.reply_text(f"‚úÖ ID –≥—Ä—É–ø–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{GROUP_CHAT_ID}`", parse_mode='Markdown')

async def bot_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    status_text = f"""
üìä *–°—Ç–∞—Ç—É—Å NeuroArt –ë–æ—Ç–∞:*

‚Ä¢ üü¢ –û–Ω–ª–∞–π–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ ‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {POST_TIME.strftime('%H:%M')}
‚Ä¢ üìù –ü—Ä–æ–º–ø—Ç–æ–≤: {len(PROMPTS + CAT_PROMPTS)}
‚Ä¢ üë• –ì—Ä—É–ø–ø–∞: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' if GROUP_CHAT_ID != '-1001234567890' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}
‚Ä¢ üñº –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: {sent_count}
‚Ä¢ üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {last_sent_time.strftime('%d.%m.%Y %H:%M') if last_sent_time else '–ù–∏–∫–æ–≥–¥–∞'}

*üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –ù–µ–π—Ä–æ—Å–µ—Ç—å: NeuroImg.art
‚Ä¢ API: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if NEUROIMG_API_KEY else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
‚Ä¢ ID –≥—Ä—É–ø–ø—ã: `{GROUP_CHAT_ID}`
    """
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def post_init(application: Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global current_job
    
    try:
        job_queue = application.job_queue
        if job_queue:
            # –°–æ–∑–¥–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É
            current_job = job_queue.run_daily(
                send_daily_image,
                time=POST_TIME,
                days=tuple(range(7)),
                name="daily_art_job"
            )
            
            # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            job_queue.run_once(
                lambda ctx: asyncio.create_task(send_daily_image(ctx)),
                when=5,  # —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                name="test_job"
            )
            
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –≤—Ä–µ–º—è: {POST_TIME.strftime('%H:%M')}")
        else:
            logger.warning("‚ö†Ô∏è JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞—á: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        print("üé® –ó–∞–ø—É—Å–∫ NeuroArt –ë–æ—Ç–∞...")
        print(f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {POST_TIME.strftime('%H:%M')}")
        print("ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç—å: NeuroImg.art")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).post_init(post_init).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("test", test_image))
        application.add_handler(CommandHandler("cat", generate_cat))
        application.add_handler(CommandHandler("daily", force_daily))
        application.add_handler(CommandHandler("set_time", set_post_time))
        application.add_handler(CommandHandler("settings", show_settings))
        application.add_handler(CommandHandler("chat_id", get_chat_id))
        application.add_handler(CommandHandler("set_group", set_group_id))
        application.add_handler(CommandHandler("status", bot_status))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("\nü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ö–æ–º–∞–Ω–¥—ã:")
        print("   /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("   /test - –¢–µ—Å—Ç NeuroImg")
        print("   /cat - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ç–∏–∫–∞")
        print("   /set_time –ß–ß:–ú–ú - –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        print("   /settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("   /chat_id - –ü–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã")
        print("   /set_group - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã")
        print("   /daily - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")
        print(f"\n‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ {POST_TIME.strftime('%H:%M')}")
        
        application.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    try:
        import aiohttp
        print("‚úÖ aiohttp —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå aiohttp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! pip install aiohttp")
    
    main()
