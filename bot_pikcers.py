import logging
import random
import asyncio
from datetime import datetime, time
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "6387413984:AAGUMwJlOidPoKZ3_m1PgFYq1fB0j5yoxDM"
# ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô!)
GROUP_CHAT_ID = "-1001234567890"  # –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ ID!

# –°–ø–∏—Å–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
PROMPTS = [
    "–ö—Ä–∞—Å–∏–≤—ã–π –ø–µ–π–∑–∞–∂ —Å –≥–æ—Ä–∞–º–∏ –∏ –æ–∑–µ—Ä–æ–º",
    "–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ —Å –Ω–µ–æ–Ω–æ–≤—ã–º–∏ –æ–≥–Ω—è–º–∏",
    "–ú–∏–ª—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –≤ –ø—Ä–∏—Ä–æ–¥–Ω–æ–π —Å—Ä–µ–¥–µ",
    "–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å –ø–ª–∞–Ω–µ—Ç–∞–º–∏",
    "–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ —Å —è—Ä–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏"
]

class SimpleImageGenerator:
    def __init__(self):
        self.has_pillow = self._check_pillow()
        
    def _check_pillow(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Pillow"""
        try:
            from PIL import Image, ImageDraw
            return True
        except ImportError:
            logger.warning("Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
            return False
    
    async def generate_image(self, prompt: str) -> bytes:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            if self.has_pillow:
                return await self._create_image_with_pillow(prompt)
            else:
                return await self._create_simple_image(prompt)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return await self._create_simple_image(prompt)
    
    async def _create_image_with_pillow(self, prompt: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Pillow"""
        from PIL import Image, ImageDraw, ImageFont
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.new('RGB', (512, 512), color=(
            random.randint(50, 200),
            random.randint(50, 200), 
            random.randint(50, 200)
        ))
        
        draw = ImageDraw.Draw(img)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
        for i in range(512):
            r = int(i / 512 * random.randint(0, 255))
            g = int(i / 512 * random.randint(0, 255))
            b = int(i / 512 * random.randint(0, 255))
            draw.line([(0, i), (512, i)], fill=(r, g, b), width=1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        try:
            font = ImageFont.load_default()
            draw.text((50, 250), f"üé® {prompt}", fill=(255, 255, 255), font=font)
            draw.text((150, 300), "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ", fill=(255, 255, 255), font=font)
        except:
            pass
        
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='PNG')
        return img_byte_arr.getvalue()
    
    async def _create_simple_image(self, prompt: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∞–º–æ–µ –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π bytes
        return b''

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
image_generator = SimpleImageGenerator()

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–æ–∫
last_sent_time = None
sent_count = 0

async def send_daily_image(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    global last_sent_time, sent_count
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ ID –≥—Ä—É–ø–ø—ã
        if GROUP_CHAT_ID == "-1001234567890":
            logger.error("‚ùå ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat_id –≤ –≥—Ä—É–ø–ø–µ")
            return
        
        logger.info(f"üïí –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {GROUP_CHAT_ID}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = random.choice(PROMPTS)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_data = await image_generator.generate_image(prompt)
        
        if image_data:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            await context.bot.send_photo(
                chat_id=GROUP_CHAT_ID,
                photo=image_data,
                caption=f"üé® –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ!\n"
                       f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                       f"üìù {prompt}\n\n"
                       f"#–∏—Å–∫—É—Å—Å—Ç–≤–æ #–Ω–µ–π—Ä–æ—Å–µ—Ç—å #–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            last_sent_time = datetime.now()
            sent_count += 1
            
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {GROUP_CHAT_ID}")
            logger.info(f"üìä –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    welcome_text = f"""
üé® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê—Ä—Ç-–ë–æ—Ç!*

–Ø –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00.

*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: {sent_count}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {last_sent_time.strftime('%d.%m.%Y %H:%M') if last_sent_time else '–ù–∏–∫–æ–≥–¥–∞'}

*üìã –ö–æ–º–∞–Ω–¥—ã:*
/test - –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/chat_id - –ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞
/set_group - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã
/daily - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞

*‚ö†Ô∏è –í–∞–∂–Ω–æ:*
–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ ID –≥—Ä—É–ø–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω!
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def test_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
    await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    prompt = random.choice(PROMPTS)
    image_data = await image_generator.generate_image(prompt)
    
    if image_data:
        await context.bot.send_photo(
            chat_id=update.message.chat_id,
            photo=image_data,
            caption=f"üñº –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\nüìù {prompt}"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

async def force_daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É"""
    try:
        if GROUP_CHAT_ID == "-1001234567890":
            await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat_id –≤ –≥—Ä—É–ø–ø–µ")
            return
        
        await update.message.reply_text("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É...")
        await send_daily_image(context)
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞"""
    chat_info = f"""
*üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:*

‚Ä¢ ID: `{update.message.chat_id}`
‚Ä¢ –¢–∏–ø: `{update.message.chat.type}`
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: `{update.message.chat.title or '–õ–∏—á–Ω—ã–π —á–∞—Ç'}`

*üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä—É–ø–ø—ã:*
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
2. –ù–∞–ø–∏—à–∏—Ç–µ `/chat_id` –≤ –≥—Ä—É–ø–ø–µ
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –≥—Ä—É–ø–ø—ã
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/set_group <ID_–≥—Ä—É–ø–ø—ã>`
    """
    await update.message.reply_text(chat_info, parse_mode='Markdown')

async def set_group_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã"""
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã: /set_group <group_id>")
        return
    
    global GROUP_CHAT_ID
    GROUP_CHAT_ID = context.args[0]
    await update.message.reply_text(f"‚úÖ ID –≥—Ä—É–ø–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{GROUP_CHAT_ID}`", parse_mode='Markdown')

async def bot_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    status_text = f"""
*üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:*

‚Ä¢ üü¢ –û–Ω–ª–∞–π–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ ‚è∞ –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: 09:00
‚Ä¢ üìù –ü—Ä–æ–º–ø—Ç–æ–≤: {len(PROMPTS)}
‚Ä¢ üë• –ì—Ä—É–ø–ø–∞: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' if GROUP_CHAT_ID != '-1001234567890' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}
‚Ä¢ üñº –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: {sent_count}
‚Ä¢ üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {last_sent_time.strftime('%d.%m.%Y %H:%M') if last_sent_time else '–ù–∏–∫–æ–≥–¥–∞'}

*üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ Pillow: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if image_generator.has_pillow else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
‚Ä¢ ID –≥—Ä—É–ø–ø—ã: `{GROUP_CHAT_ID}`
    """
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def simulate_daily_job(context: ContextTypes.DEFAULT_TYPE):
    """–°–∏–º—É–ª—è—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π job –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üîß –°–∏–º—É–ª—è—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏...")
    await send_daily_image(context)

async def post_init(application: Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å JobQueue
        if hasattr(application, 'job_queue') and application.job_queue:
            job_queue = application.job_queue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É –≤ 9:00
            job_queue.run_daily(
                send_daily_image,
                time=time(hour=9, minute=0, second=0),
                days=tuple(range(7)),
                name="daily_art_job"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            job_queue.run_repeating(
                simulate_daily_job,
                interval=300,  # 5 –º–∏–Ω—É—Ç
                first=10,      # –Ω–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
                name="test_job"
            )
            
            logger.info("‚úÖ JobQueue –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ 9:00")
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
        else:
            logger.warning("‚ö†Ô∏è JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ JobQueue: {e}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        print("üé® –ó–∞–ø—É—Å–∫ –ê—Ä—Ç-–ë–æ—Ç–∞...")
        print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω python-telegram-bot —Å JobQueue:")
        print("    pip install \"python-telegram-bot[job-queue]\"")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("test", test_image))
        application.add_handler(CommandHandler("daily", force_daily))
        application.add_handler(CommandHandler("chat_id", get_chat_id))
        application.add_handler(CommandHandler("set_group", set_group_id))
        application.add_handler(CommandHandler("status", bot_status))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º JobQueue
        job_queue = application.job_queue
        if job_queue:
            print("‚úÖ JobQueue –¥–æ—Å—Ç—É–ø–Ω–∞")
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –≤ 9:00
            job_queue.run_daily(
                send_daily_image,
                time=time(hour=9, minute=0, second=0),
                days=tuple(range(7)),
                name="daily_art_job"
            )
            
            # –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            job_queue.run_repeating(
                simulate_daily_job,
                interval=120,  # 2 –º–∏–Ω—É—Ç—ã
                first=5,       # –Ω–∞—á–∞—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                name="debug_job"
            )
            
            print("‚úÖ –ó–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
            print("   - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 09:00")
            print("   - –¢–µ—Å—Ç –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã")
        else:
            print("‚ùå JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
            print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install \"python-telegram-bot[job-queue]\"")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("\nü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ö–æ–º–∞–Ω–¥—ã:")
        print("   /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("   /test - –¢–µ—Å—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        print("   /daily - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")
        print("   /chat_id - –ü–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã")
        print("   /set_group - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã")
        print("   /status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
        print("\n‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ 9:00 –∏ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω –¥–ª—è —Ç–µ—Å—Ç–∞")
        
        application.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫
    try:
        import telegram
        print("‚úÖ python-telegram-bot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-telegram-bot")
    
    try:
        from PIL import Image
        print("‚úÖ Pillow —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ö†Ô∏è  Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pillow")
    
    main()
