import logging
import random
import asyncio
import aiohttp
import re
from datetime import datetime, time
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
import io
from urllib.parse import quote
import json
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_TOKEN = "6387413984:AAGUMwJlOidPoKZ3_m1PgFYq1fB0j5yoxDM"
YANDEXART_API_KEY = "ajeimg918cd8u005nb5c"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á

# ID –≥—Ä—É–ø–ø—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π!)
GROUP_CHAT_ID = "-1002689149167"

# –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
POST_TIME = time(hour=9, minute=0)  # 09:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –°–ø–∏—Å–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
PROMPTS = [
    "–∫—Ä–∞—Å–∏–≤—ã–π –ø–µ–π–∑–∞–∂ —Å –≥–æ—Ä–∞–º–∏ –≤ —Å—Ç–∏–ª–µ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞",
    "—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ –Ω–æ—á—å—é —Å –Ω–µ–æ–Ω–æ–≤—ã–º–∏ –æ–≥–Ω—è–º–∏",
    "–º–∏–ª—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –≤ –ø—Ä–∏—Ä–æ–¥–µ, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ", 
    "–∫–æ—Å–º–æ—Å —Å –ø–ª–∞–Ω–µ—Ç–∞–º–∏ –∏ –∑–≤–µ–∑–¥–∞–º–∏, —Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å",
    "–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ —Å —è—Ä–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏",
    "—Å—Ç–∞—Ä–∏–Ω–Ω—ã–π –∑–∞–º–æ–∫ –≤ —Ç—É–º–∞–Ω–µ, –º–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞",
    "–ø–æ–¥–≤–æ–¥–Ω—ã–π –º–∏—Ä —Å –∫–æ—Ä–∞–ª–ª–∞–º–∏ –∏ —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–º–∏ —Ä—ã–±–∞–º–∏",
    "–æ—Å–µ–Ω–Ω–∏–π –ª–µ—Å —Å –∑–æ–ª–æ—Ç—ã–º–∏ –ª–∏—Å—Ç—å—è–º–∏, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
    "–º–∞–≥–∏—á–µ—Å–∫–∏–π –ª–µ—Å —Å —Å–≤–µ—Ç—è—â–∏–º–∏—Å—è —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏",
    "–≥–æ—Ä–Ω—ã–π –≤–æ–¥–æ–ø–∞–¥ –≤ —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"
]

CAT_PROMPTS = [
    "–º–∏–ª—ã–π –ø—É—à–∏—Å—Ç—ã–π –∫–æ—Ç–µ–Ω–æ–∫ –≤ –∫–æ—Ä–∑–∏–Ω–∫–µ, —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ",
    "–∫—Ä–∞—Å–∏–≤—ã–π –∫–æ—Ç —Å –±–æ–ª—å—à–∏–º–∏ –≥–ª–∞–∑–∞–º–∏, –ø–æ—Ä—Ç—Ä–µ—Ç",
    "–∫–æ—Ç —Å–ø–∏—Ç —É—é—Ç–Ω–æ –≤ –∫–æ–º–Ω–∞—Ç–µ, –º—è–≥–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
    "–∏–≥—Ä–∏–≤—ã–π –∫–æ—Ç–µ–Ω–æ–∫ –∏–≥—Ä–∞–µ—Ç —Å –∫–ª—É–±–∫–æ–º –Ω–∏—Ç–æ–∫",
    "–∫–æ—Ç –≤ –∫–æ—Ä–æ–Ω–µ –∫–∞–∫ –∫–æ—Ä–æ–ª—å, —Ñ—ç–Ω—Ç–µ–∑–∏ —Å—Ç–∏–ª—å",
    "–≥—Ä—É–ø–ø–∞ –∫–æ—Ç—è—Ç –≤–º–µ—Å—Ç–µ, –º–∏–ª–∞—è —Å—Ü–µ–Ω–∞",
    "–∫–æ—Ç –≤ –ª–µ—Å—É —Å—Ä–µ–¥–∏ –ø—Ä–∏—Ä–æ–¥—ã, –Ω–∞—Ç—É—Ä–∞–ª–∏—Å—Ç–∏—á–Ω–æ",
    "–∫–æ—Ç —Å –º–∞–≥–∏—á–µ—Å–∫–∏–º–∏ –∫—Ä—ã–ª—å—è–º–∏, —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
    "–∫–æ—Ç–∏–∫ –≤ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º —Å–∫–∞—Ñ–∞–Ω–¥—Ä–µ, –Ω–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
    "—Å–º–µ—à–Ω–æ–π –∫–æ—Ç –≤ –∑–∞–±–∞–≤–Ω–æ–π –ø–æ–∑–µ, –º—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å"
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è YandexART API
YANDEXART_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/imageGeneration"
YANDEXART_HEADERS = {
    "Authorization": f"Api-Key {YANDEXART_API_KEY}",
    "Content-Type": "application/json"
}

class YandexArtImageGenerator:
    def __init__(self):
        self.session = None
        
    async def init_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏"""
        if not self.session:
            self.session = aiohttp.ClientSession(headers=YANDEXART_HEADERS)
    
    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
            self.session = None
    
    async def generate_image(self, prompt: str) -> bytes:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ YandexART API"""
        try:
            await self.init_session()
            
            logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt}")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            payload = {
                "model": "art",  # –ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                "generationOptions": {
                    "seed": random.randint(0, 1000000),  # –°–ª—É—á–∞–π–Ω—ã–π seed –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    "temperature": 0.7,  # –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (0-1)
                    "numImages": 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                },
                "messages": [
                    {
                        "role": "user",
                        "text": f"–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {prompt}. –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ, —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ."
                    }
                ]
            }
            
            async with self.session.post(YANDEXART_API_URL, json=payload, timeout=60) as response:
                if response.status == 200:
                    result = await response.json()
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    if 'images' in result and result['images']:
                        image_base64 = result['images'][0]
                        image_data = base64.b64decode(image_base64)
                        
                        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(image_data)} bytes")
                        return image_data
                    else:
                        logger.warning("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ API")
                        return await self._get_fallback_image(prompt)
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ API YandexART: {response.status} - {error_text}")
                    return await self._get_fallback_image(prompt)
                    
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return await self._get_fallback_image(prompt)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return await self._get_fallback_image(prompt)
    
    async def _get_fallback_image(self, prompt: str) -> bytes:
        """Fallback –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
            return await self._search_backup_image(prompt)
        except:
            return b''
    
    async def _search_backup_image(self, query: str) -> bytes:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∏–Ω–∫–∏"""
        try:
            search_url = f"https://yandex.ru/images/search?text={quote(query)}"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(search_url, timeout=30) as response:
                    if response.status == 200:
                        html = await response.text()
                        
                        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è fallback
                        pattern = r'"img_href":"(https?://[^"]+\.(?:jpg|jpeg|png|webp))"'
                        image_urls = re.findall(pattern, html)
                        
                        if image_urls:
                            image_url = random.choice(image_urls)
                            async with session.get(image_url, timeout=20) as img_response:
                                if img_response.status == 200:
                                    return await img_response.read()
            
            return b''
        except:
            return b''

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
image_generator = YandexArtImageGenerator()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_sent_time = None
sent_count = 0
current_job = None

async def send_daily_image(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    global last_sent_time, sent_count
    
    try:
        if GROUP_CHAT_ID == "-1002592721236":
            logger.error("‚ùå ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return
        
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {GROUP_CHAT_ID}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = random.choice(PROMPTS + CAT_PROMPTS)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_data = await image_generator.generate_image(prompt)
        
        if image_data and len(image_data) > 1024:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            await context.bot.send_photo(
                chat_id=GROUP_CHAT_ID,
                photo=image_data,
                caption=f"üé® –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è AI-–∫–∞—Ä—Ç–∏–Ω–∫–∞!\n"
                       f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                       f"ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}\n\n"
                       f"#yandexart #ai #–≥–µ–Ω–µ—Ä–∞—Ü–∏—è #–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            last_sent_time = datetime.now()
            sent_count += 1
            
            logger.info(f"‚úÖ AI-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=f"‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}\n"
                     f"–ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≤—Ç—Ä–∞! üåÖ"
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    welcome_text = f"""
üé® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YandexART –ë–æ—Ç!*

–Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é AI –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏—Ö –≤ –≥—Ä—É–ø–ø—É.

*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –û—Ç–ø—Ä–∞–≤–æ–∫: {sent_count}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è: {last_sent_time.strftime('%d.%m.%Y %H:%M') if last_sent_time else '–ù–∏–∫–æ–≥–¥–∞'}
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {POST_TIME.strftime('%H:%M')}

*üìã –ö–æ–º–∞–Ω–¥—ã:*
/generate - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
/cat - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ç–∏–∫–∞
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/set_time - –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
/chat_id - –ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞
/set_group - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã
/daily - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    query = ' '.join(context.args) if context.args else random.choice(PROMPTS)
    
    await update.message.reply_text(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É: {query}")
    
    image_data = await image_generator.generate_image(query)
    
    if image_data and len(image_data) > 1024:
        await context.bot.send_photo(
            chat_id=update.message.chat_id,
            photo=image_data,
            caption=f"ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}"
        )
    else:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")

async def generate_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ç–∏–∫–∞"""
    query = random.choice(CAT_PROMPTS)
    
    await update.message.reply_text(f"üê± –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ—Ç–∏–∫–∞: {query}")
    
    image_data = await image_generator.generate_image(query)
    
    if image_data and len(image_data) > 1024:
        await context.bot.send_photo(
            chat_id=update.message.chat_id,
            photo=image_data,
            caption=f"üêæ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ—Ç–∏–∫: {query}"
        )
    else:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ç–∏–∫–∞ :(")

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (force_daily, set_post_time, show_settings, get_chat_id, set_group_id, bot_status)

async def force_daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"""
    try:
        if GROUP_CHAT_ID == "-1001234567890":
            await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return
        
        await update.message.reply_text("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞...")
        await send_daily_image(context)
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def set_post_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    global POST_TIME, current_job
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è: /set_time –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: /set_time 09:30")
        return
    
    try:
        time_str = context.args[0]
        hours, minutes = map(int, time_str.split(':'))
        
        if not (0 <= hours < 24 and 0 <= minutes < 60):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        POST_TIME = time(hour=hours, minute=minutes)
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º job —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        job_queue = context.application.job_queue
        if job_queue and current_job:
            current_job.schedule_removal()
        
        current_job = job_queue.run_daily(
            send_daily_image,
            time=POST_TIME,
            days=tuple(range(7)),
            name="daily_art_job"
        )
        
        await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}")
        logger.info(f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {time_str}")
        
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: /set_time 09:30")

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    settings_text = f"""
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:*

‚Ä¢ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: `{POST_TIME.strftime('%H:%M')}`
‚Ä¢ ID –≥—Ä—É–ø–ø—ã: `{'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if GROUP_CHAT_ID != '-1001234567890' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: `YandexART API`
‚Ä¢ –ü—Ä–æ–º–ø—Ç–æ–≤: `{len(PROMPTS + CAT_PROMPTS)}`

*–ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫:*
/set_time –ß–ß:–ú–ú - –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
/set_group ID - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã
    """
    await update.message.reply_text(settings_text, parse_mode='Markdown')

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞"""
    chat_info = f"""
üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:*

‚Ä¢ ID: `{update.message.chat_id}`
‚Ä¢ –¢–∏–ø: `{update.message.chat.type}`
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: `{update.message.chat.title or '–õ–∏—á–Ω—ã–π —á–∞—Ç'}`

üí° *–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä—É–ø–ø—ã:*
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
2. –ù–∞–ø–∏—à–∏—Ç–µ `/chat_id` –≤ –≥—Ä—É–ø–ø–µ
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –≥—Ä—É–ø–ø—ã
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/set_group ID_–≥—Ä—É–ø–ø—ã`
    """
    await update.message.reply_text(chat_info, parse_mode='Markdown')

async def set_group_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã"""
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã: /set_group <group_id>")
        return
    
    global GROUP_CHAT_ID
    GROUP_CHAT_ID = context.args[0]
    await update.message.reply_text(f"‚úÖ ID –≥—Ä—É–ø–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{GROUP_CHAT_ID}`", parse_mode='Markdown')

async def bot_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    status_text = f"""
üìä *–°—Ç–∞—Ç—É—Å YandexART –ë–æ—Ç–∞:*

‚Ä¢ üü¢ –û–Ω–ª–∞–π–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ ‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {POST_TIME.strftime('%H:%M')}
‚Ä¢ üìù –ü—Ä–æ–º–ø—Ç–æ–≤: {len(PROMPTS + CAT_PROMPTS)}
‚Ä¢ üë• –ì—Ä—É–ø–ø–∞: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' if GROUP_CHAT_ID != '-1001234567890' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}
‚Ä¢ üñº –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: {sent_count}
‚Ä¢ üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {last_sent_time.strftime('%d.%m.%Y %H:%M') if last_sent_time else '–ù–∏–∫–æ–≥–¥–∞'}

*üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: YandexART API
‚Ä¢ ID –≥—Ä—É–ø–ø—ã: `{GROUP_CHAT_ID}`
    """
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def post_init(application: Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global current_job
    
    try:
        job_queue = application.job_queue
        if job_queue:
            # –°–æ–∑–¥–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É
            current_job = job_queue.run_daily(
                send_daily_image,
                time=POST_TIME,
                days=tuple(range(7)),
                name="daily_art_job"
            )
            logger.info(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ {POST_TIME.strftime('%H:%M')}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

async def post_stop(application: Application):
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    await image_generator.close_session()
    logger.info("‚úÖ –°–µ—Å—Å–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).post_init(post_init).post_stop(post_stop).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("generate", generate_image))
    application.add_handler(CommandHandler("cat", generate_cat))
    application.add_handler(CommandHandler("daily", force_daily))
    application.add_handler(CommandHandler("set_time", set_post_time))
    application.add_handler(CommandHandler("settings", show_settings))
    application.add_handler(CommandHandler("chat_id", get_chat_id))
    application.add_handler(CommandHandler("set_group", set_group_id))
    application.add_handler(CommandHandler("status", bot_status))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ YandexART –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == "__main__":
    main()
