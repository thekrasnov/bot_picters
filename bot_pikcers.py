import logging
import asyncio
import aiohttp
import random
import json
from datetime import datetime, time
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
import io
from PIL import Image, ImageDraw, ImageFont
import time as time_module
import base64
from io import BytesIO
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "6387413984:AAGUMwJlOidPoKZ3_m1PgFYq1fB0j5yoxDM"
# ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô!)
GROUP_CHAT_ID = "-1001234567890"

# –°–ø–∏—Å–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
PROMPTS = [
    "A majestic cat in the snow, photorealistic, high detail",
    "Beautiful landscape with mountains and lake, digital art",
    "Futuristic city with neon lights, cyberpunk style",
    "Cute animals in natural environment, high quality",
    "Cosmic space with planets and stars, vibrant colors",
    "Abstract art with bright colors and shapes",
    "Ancient castle in fog, mystical atmosphere",
    "Underwater world with corals and tropical fish",
    "Autumn forest with golden leaves, cozy atmosphere",
    "Magical forest with glowing plants, fantasy style"
]

CAT_PROMPTS = [
    "Cute fluffy kitten playing with yarn, photorealistic",
    "Majestic cat sitting on a throne, royal style",
    "Sleeping cat in a cozy basket, warm lighting",
    "Cat with beautiful green eyes, detailed fur",
    "Playful kitten chasing a butterfly in garden",
    "Cat wearing a tiny crown, fantasy style",
    "Group of kittens cuddling together, adorable",
    "Cat exploring magical forest, fantasy art",
    "Cat with wings, angelic style, digital art",
    "Cat in space suit, sci-fi theme, detailed"
]

ANIME_PROMPTS = [
    "Anime girl with colorful hair, detailed eyes, kawaii style",
    "Anime boy in school uniform, manga art style",
    "Anime character in fantasy world, digital painting",
    "Cute anime animal character, chibi style",
    "Anime mecha robot, detailed mechanical design",
    "Anime landscape with cherry blossoms, serene atmosphere",
    "Anime warrior with sword, action pose",
    "Anime magical girl transformation sequence",
    "Anime food illustration, delicious and cute",
    "Anime cityscape at night, neon lights"
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_SETTINGS = {
    "auto_post": True,
    "post_time": "09:00",
    "image_quality": "high",
    "theme": "random"
}

class ImageGenerator:
    def __init__(self):
        pass
    
    async def generate_image(self, prompt: str, style: str = "default") -> bytes:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—Ç–∏–ª–µ"""
        try:
            if style == "cat":
                return await self._create_cat_image(prompt)
            elif style == "anime":
                return await self._create_anime_image(prompt)
            elif style == "abstract":
                return await self._create_abstract_image(prompt)
            else:
                return await self._create_default_image(prompt)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return await self._create_default_image(prompt)
    
    async def _create_default_image(self, prompt: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        colors = [
            (random.randint(50, 200), random.randint(50, 200), random.randint(50, 200)),
            (random.randint(0, 100), random.randint(100, 200), random.randint(200, 255)),
            (random.randint(200, 255), random.randint(0, 100), random.randint(100, 200))
        ]
        
        img = Image.new('RGB', (512, 512), color=random.choice(colors))
        draw = ImageDraw.Draw(img)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç
        for i in range(512):
            r = int(i / 512 * random.randint(0, 255))
            g = int(i / 512 * random.randint(0, 255))
            b = int(i / 512 * random.randint(0, 255))
            draw.line([(0, i), (512, i)], fill=(r, g, b), width=1)
        
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='PNG')
        return img_byte_arr.getvalue()
    
    async def _create_cat_image(self, prompt: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ—Ç–∏–∫–æ–º"""
        img = Image.new('RGB', (512, 512), color=(random.randint(200, 255), 
                                                 random.randint(180, 220), 
                                                 random.randint(150, 200)))
        
        draw = ImageDraw.Draw(img)
        self._draw_cat(draw)
        
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='PNG')
        return img_byte_arr.getvalue()
    
    async def _create_anime_image(self, prompt: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∏–º–µ-—Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        # –Ø—Ä–∫–∏–µ –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –∞–Ω–∏–º–µ
        colors = [
            (255, 200, 200),  # —Ä–æ–∑–æ–≤—ã–π
            (200, 255, 200),  # –∑–µ–ª–µ–Ω—ã–π
            (200, 200, 255),  # –≥–æ–ª—É–±–æ–π
            (255, 255, 200),  # –∂–µ–ª—Ç—ã–π
            (255, 200, 255),  # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
        ]
        
        img = Image.new('RGB', (512, 512), color=random.choice(colors))
        draw = ImageDraw.Draw(img)
        
        # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∏–º–µ-—ç–ª–µ–º–µ–Ω—Ç (—Å–µ—Ä–¥–µ—á–∫–∏)
        for _ in range(10):
            x, y = random.randint(50, 450), random.randint(50, 450)
            size = random.randint(20, 50)
            self._draw_heart(draw, x, y, size, (255, 100, 100))
        
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='PNG')
        return img_byte_arr.getvalue()
    
    async def _create_abstract_image(self, prompt: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        img = Image.new('RGB', (512, 512), color=(0, 0, 0))
        draw = ImageDraw.Draw(img)
        
        # –°–æ–∑–¥–∞–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ —É–∑–æ—Ä—ã
        for _ in range(50):
            x1, y1 = random.randint(0, 512), random.randint(0, 512)
            x2, y2 = random.randint(0, 512), random.randint(0, 512)
            color = (random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))
            draw.line([(x1, y1), (x2, y2)], fill=color, width=random.randint(1, 5))
        
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='PNG')
        return img_byte_arr.getvalue()
    
    def _draw_cat(self, draw: ImageDraw.Draw):
        """–†–∏—Å—É–µ—Ç –∫–æ—Ç–∏–∫–∞"""
        # –¢–µ–ª–æ
        draw.ellipse([150, 150, 350, 350], fill=(200, 150, 100), outline=(0, 0, 0), width=3)
        # –ì–æ–ª–æ–≤–∞
        draw.ellipse([175, 100, 325, 200], fill=(200, 150, 100), outline=(0, 0, 0), width=3)
        # –ì–ª–∞–∑–∞
        draw.ellipse([200, 125, 225, 150], fill=(0, 0, 0))
        draw.ellipse([275, 125, 300, 150], fill=(0, 0, 0))
        # –ù–æ—Å
        draw.ellipse([237, 160, 263, 170], fill=(255, 150, 150))
        # –£—Å—ã
        for i in range(3):
            draw.line([(225, 165), (175, 155 + i*10)], fill=(0, 0, 0), width=1)
            draw.line([(275, 165), (325, 155 + i*10)], fill=(0, 0, 0), width=1)
    
    def _draw_heart(self, draw: ImageDraw.Draw, x: int, y: int, size: int, color: tuple):
        """–†–∏—Å—É–µ—Ç —Å–µ—Ä–¥–µ—á–∫–æ"""
        draw.ellipse([x, y, x + size, y + size], fill=color)
        draw.ellipse([x + size, y, x + 2*size, y + size], fill=color)
        draw.polygon([(x, y + size//2), (x + size, y + 2*size), (x + 2*size, y + size//2)], fill=color)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
image_generator = ImageGenerator()

# ========== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ start"""
    welcome_text = """
üé® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê—Ä—Ç-–ë–æ—Ç!*

–Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏—Ö –≤ –≥—Ä—É–ø–ø—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00.

*üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/help - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
/test - –¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
/cat - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ç–∏–∫–∞
/anime - –ê–Ω–∏–º–µ-—Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
/abstract - –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ

*‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
/status - –°—Ç–∞—Ç—É—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/chat_id - –ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞
/set_group - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã

*üé≠ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/daily - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
/theme - –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
/add_prompt - –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ–º–ø—Ç
/list_prompts - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤

–ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
*üìñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

*üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:*
/test - –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
/cat - –ú–∏–ª—ã–µ –∫–æ—Ç–∏–∫–∏ üê±
/anime - –ê–Ω–∏–º–µ-—Å—Ç–∏–ª—å
/abstract - –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ
/theme <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É

*‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/chat_id - ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
/set_group <id> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã

*üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
/list_prompts - –í—Å–µ –ø—Ä–æ–º–ø—Ç—ã
/list_themes - –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/version - –í–µ—Ä—Å–∏—è –±–æ—Ç–∞

*üîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:*
/daily - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
/auto_post <on/off> - –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
/add_prompt <—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç
/clear_prompts - –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–º–ø—Ç—ã

*‚ùì –ü—Ä–∏–º–µ—Ä—ã:*
/test
/cat
/set_group -1001234567890
/add_prompt Beautiful sunset
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def test_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
    await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    prompt = random.choice(PROMPTS)
    image_data = await image_generator.generate_image(prompt)
    
    await context.bot.send_photo(
        chat_id=update.message.chat_id,
        photo=image_data,
        caption=f"üñº –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\nüìù *{prompt}*",
        parse_mode='Markdown'
    )

async def generate_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ç–∏–∫–∞"""
    await update.message.reply_text("üê± –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–∏–ª–æ–≥–æ –∫–æ—Ç–∏–∫–∞...")
    
    prompt = random.choice(CAT_PROMPTS)
    image_data = await image_generator.generate_image(prompt, "cat")
    
    await context.bot.send_photo(
        chat_id=update.message.chat_id,
        photo=image_data,
        caption=f"üêæ –ú—É—Ä-–º—è—É!\nüìù *{prompt}*",
        parse_mode='Markdown'
    )

async def generate_anime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –∞–Ω–∏–º–µ-—Å—Ç–∏–ª–µ"""
    await update.message.reply_text("üéé –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∏–º–µ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    prompt = random.choice(ANIME_PROMPTS)
    image_data = await image_generator.generate_image(prompt, "anime")
    
    await context.bot.send_photo(
        chat_id=update.message.chat_id,
        photo=image_data,
        caption=f"üå∏ –ê–Ω–∏–º–µ-—Å—Ç–∏–ª—å!\nüìù *{prompt}*",
        parse_mode='Markdown'
    )

async def generate_abstract(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ"""
    await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ...")
    
    prompt = "Abstract art with " + random.choice(["colorful patterns", "geometric shapes", "fluid forms"])
    image_data = await image_generator.generate_image(prompt, "abstract")
    
    await context.bot.send_photo(
        chat_id=update.message.chat_id,
        photo=image_data,
        caption=f"üé≠ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ\nüìù *{prompt}*",
        parse_mode='Markdown'
    )

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    settings_text = f"""
*‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:*

‚Ä¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: `{'‚úÖ –í–∫–ª' if BOT_SETTINGS['auto_post'] else '‚ùå –í—ã–∫–ª'}`
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: `{BOT_SETTINGS['post_time']}`
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: `{BOT_SETTINGS['image_quality']}`
‚Ä¢ –¢–µ–º–∞: `{BOT_SETTINGS['theme']}`
‚Ä¢ ID –≥—Ä—É–ø–ø—ã: `{GROUP_CHAT_ID if GROUP_CHAT_ID != '-1001234567890' else '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`

*–ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫:*
/auto_post <on/off> - –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
/set_time <–ß–ß:–ú–ú> - –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
/set_theme <—Ç–µ–º–∞> - –¢–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    await update.message.reply_text(settings_text, parse_mode='Markdown')

async def bot_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    status_text = f"""
*üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:*

‚Ä¢ üü¢ –û–Ω–ª–∞–π–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ ‚è∞ –°–ª–µ–¥—É—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {BOT_SETTINGS['post_time']}
‚Ä¢ üìù –ü—Ä–æ–º–ø—Ç–æ–≤: {len(PROMPTS)}
‚Ä¢ üê± –ö–æ—Ç–∏–∫–æ–≤: {len(CAT_PROMPTS)}
‚Ä¢ üéé –ê–Ω–∏–º–µ: {len(ANIME_PROMPTS)}
‚Ä¢ üë• –ì—Ä—É–ø–ø–∞: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' if GROUP_CHAT_ID != '-1001234567890' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}

*üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:* 0 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
*üìà –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:* 0 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–í–µ—Ä—Å–∏—è: 2.0
    """
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞"""
    chat_info = f"""
*üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:*

‚Ä¢ ID: `{update.message.chat_id}`
‚Ä¢ –¢–∏–ø: `{update.message.chat.type}`
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: `{update.message.chat.title or '–õ–∏—á–Ω—ã–π —á–∞—Ç'}`

*üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä—É–ø–ø—ã:*
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
2. –ù–∞–ø–∏—à–∏—Ç–µ `/chat_id` –≤ –≥—Ä—É–ø–ø–µ
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –≥—Ä—É–ø–ø—ã
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/set_group <ID_–≥—Ä—É–ø–ø—ã>`
    """
    await update.message.reply_text(chat_info, parse_mode='Markdown')

async def set_group_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã"""
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã: /set_group <group_id>")
        return
    
    global GROUP_CHAT_ID
    GROUP_CHAT_ID = context.args[0]
    await update.message.reply_text(f"‚úÖ ID –≥—Ä—É–ø–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{GROUP_CHAT_ID}`", parse_mode='Markdown')

async def list_prompts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤"""
   
