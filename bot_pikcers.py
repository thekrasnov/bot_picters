import logging
import random
import asyncio
import aiohttp
import re
from datetime import datetime, time
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
import io
from urllib.parse import quote
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
BOT_TOKEN = "6387413984:AAGUMwJlOidPoKZ3_m1PgFYq1fB0j5yoxDM"

# ID –≥—Ä—É–ø–ø—ã (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π!)
GROUP_CHAT_ID = "-1002592721236"

# –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
POST_TIME = time(hour=9, minute=0)  # 09:00 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –°–ø–∏—Å–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
PROMPTS = [
    "–∫—Ä–∞—Å–∏–≤—ã–π –ø–µ–π–∑–∞–∂ —Å –≥–æ—Ä–∞–º–∏",
    "—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ –Ω–æ—á—å—é",
    "–º–∏–ª—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –≤ –ø—Ä–∏—Ä–æ–¥–µ", 
    "–∫–æ—Å–º–æ—Å –ø–ª–∞–Ω–µ—Ç—ã –∑–≤–µ–∑–¥—ã",
    "–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ",
    "—Å—Ç–∞—Ä–∏–Ω–Ω—ã–π –∑–∞–º–æ–∫",
    "–ø–æ–¥–≤–æ–¥–Ω—ã–π –º–∏—Ä –∫–æ—Ä–∞–ª–ª—ã",
    "–æ—Å–µ–Ω–Ω–∏–π –ª–µ—Å –∑–æ–ª–æ—Ç—ã–µ –ª–∏—Å—Ç—å—è",
    "–º–∞–≥–∏—á–µ—Å–∫–∏–π –ª–µ—Å",
    "–≥–æ—Ä–Ω—ã–π –≤–æ–¥–æ–ø–∞–¥"
]

CAT_PROMPTS = [
    "–º–∏–ª—ã–π –ø—É—à–∏—Å—Ç—ã–π –∫–æ—Ç–µ–Ω–æ–∫",
    "–∫—Ä–∞—Å–∏–≤—ã–π –∫–æ—Ç –≥–ª–∞–∑–∞",
    "–∫–æ—Ç —Å–ø–∏—Ç –∫–æ—Ä–∑–∏–Ω–µ",
    "–∏–≥—Ä–∏–≤—ã–π –∫–æ—Ç–µ–Ω–æ–∫ –∏–≥—Ä–∞–µ—Ç",
    "–∫–æ—Ç –≤ –∫–æ—Ä–æ–Ω–µ",
    "–≥—Ä—É–ø–ø–∞ –∫–æ—Ç—è—Ç",
    "–∫–æ—Ç –≤ –ª–µ—Å—É",
    "–∫–æ—Ç —Å –∫—Ä—ã–ª—å—è–º–∏",
    "–∫–æ—Ç–∏–∫ –≤ –∫–æ—Å–º–æ—Å–µ",
    "—Å–º–µ—à–Ω–æ–π –∫–æ—Ç"
]

# User-Agent –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
}

class YandexImageSearcher:
    def __init__(self):
        self.session = None
        
    async def init_session(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏"""
        if not self.session:
            self.session = aiohttp.ClientSession(headers=HEADERS)
    
    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
            self.session = None
    
    async def search_image(self, query: str) -> bytes:
        """–ò—â–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∏–Ω–∫–∏"""
        try:
            await self.init_session()
            
            # –ö–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è URL
            encoded_query = quote(query)
            
            # URL –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∏–Ω–∫–∞—Ö
            search_url = f"https://yandex.ru/images/search?text={encoded_query}&itype=jpg"
            
            logger.info(f"üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {query}")
            
            async with self.session.get(search_url, timeout=30) as response:
                if response.status == 200:
                    html = await response.text()
                    
                    # –ò—â–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ HTML
                    image_urls = self._extract_image_urls(html)
                    
                    if image_urls:
                        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        image_url = random.choice(image_urls)
                        logger.info(f"üì∑ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
                        
                        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        return await self._download_image(image_url)
                    else:
                        logger.warning("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ HTML")
                        return await self._get_fallback_image(query)
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP: {response.status}")
                    return await self._get_fallback_image(query)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return await self._get_fallback_image(query)
    
    def _extract_image_urls(self, html: str) -> list:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ HTML"""
        try:
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            patterns = [
                r'"img_href":"(https?://[^"]+\.(?:jpg|jpeg|png|webp))"',
                r'src="(https?://[^"]+\.(?:jpg|jpeg|png|webp))"',
                r'url\(\'(https?://[^"]+\.(?:jpg|jpeg|png|webp))\'\)',
            ]
            
            image_urls = []
            for pattern in patterns:
                matches = re.findall(pattern, html, re.IGNORECASE)
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ URL
                valid_urls = [url for url in matches if self._is_valid_image_url(url)]
                image_urls.extend(valid_urls)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            return list(set(image_urls))[:20]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL: {e}")
            return []
    
    def _is_valid_image_url(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –ò—Å–∫–ª—é—á–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã, –∏–∫–æ–Ω–∫–∏ –∏ –º–∞–ª–µ–Ω—å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        exclude_keywords = [
            'logo', 'icon', 'avatar', 'thumb', 'small', 
            'pixel', 'placeholder', 'yandex', 'google'
        ]
        
        url_lower = url.lower()
        return (
            any(ext in url_lower for ext in ['.jpg', '.jpeg', '.png', '.webp']) and
            not any(keyword in url_lower for keyword in exclude_keywords) and
            'http' in url_lower
        )
    
    async def _download_image(self, image_url: str) -> bytes:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
        try:
            async with self.session.get(image_url, timeout=20) as response:
                if response.status == 200:
                    image_data = await response.read()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if len(image_data) > 1024:  # –ú–∏–Ω–∏–º—É–º 1KB
                        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ: {len(image_data)} bytes")
                        return image_data
                    else:
                        logger.warning("‚ùå –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                        return b''
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status}")
                    return b''
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return b''
    
    async def _get_fallback_image(self, query: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –±—ã—Å—Ç—Ä—ã–π API
            return await self._search_alternative(query)
        except:
            return b''
    
    async def _search_alternative(self, query: str) -> bytes:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google Images (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
            google_url = f"https://www.google.com/search?q={quote(query)}&tbm=isch"
            
            async with self.session.get(google_url, timeout=20) as response:
                if response.status == 200:
                    html = await response.text()
                    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Google Images
                    image_pattern = r'"(https?://[^"]+\.(?:jpg|jpeg|png|webp))"'
                    image_urls = re.findall(image_pattern, html, re.IGNORECASE)
                    
                    if image_urls:
                        image_url = random.choice(image_urls)
                        return await self._download_image(image_url)
            
            return b''
        except:
            return b''

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞
image_searcher = YandexImageSearcher()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_sent_time = None
sent_count = 0
current_job = None

async def send_daily_image(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    global last_sent_time, sent_count
    
    try:
        if GROUP_CHAT_ID == "-1002592721236":
            logger.error("‚ùå ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return
        
        logger.info(f"üïí –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {GROUP_CHAT_ID}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = random.choice(PROMPTS + CAT_PROMPTS)
        
        # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_data = await image_searcher.search_image(prompt)
        
        if image_data and len(image_data) > 1024:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            await context.bot.send_photo(
                chat_id=GROUP_CHAT_ID,
                photo=image_data,
                caption=f"üé® –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞!\n"
                       f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                       f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}\n\n"
                       f"#—è–Ω–¥–µ–∫—Å #–∫–∞—Ä—Ç–∏–Ω–∫–∏ #–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            last_sent_time = datetime.now()
            sent_count += 1
            
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await context.bot.send_message(
                chat_id=GROUP_CHAT_ID,
                text=f"‚ùå –°–µ–≥–æ–¥–Ω—è –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}\n"
                     f"–ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≤—Ç—Ä–∞! üåÖ"
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    welcome_text = f"""
üé® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–∞—Ä—Ç–∏–Ω–∫–∏ –ë–æ—Ç!*

–Ø –∏—â—É –∫—Ä–∞—Å–∏–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏—Ö –≤ –≥—Ä—É–ø–ø—É.

*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –û—Ç–ø—Ä–∞–≤–æ–∫: {sent_count}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è: {last_sent_time.strftime('%d.%m.%Y %H:%M') if last_sent_time else '–ù–∏–∫–æ–≥–¥–∞'}
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {POST_TIME.strftime('%H:%M')}

*üìã –ö–æ–º–∞–Ω–¥—ã:*
/search - –ù–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É
/cat - –ù–∞–π—Ç–∏ –∫–æ—Ç–∏–∫–∞
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏
/set_time - –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
/chat_id - –ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞
/set_group - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã
/daily - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def search_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    query = ' '.join(context.args) if context.args else random.choice(PROMPTS)
    
    await update.message.reply_text(f"üîç –ò—â—É –∫–∞—Ä—Ç–∏–Ω–∫—É: {query}")
    
    image_data = await image_searcher.search_image(query)
    
    if image_data and len(image_data) > 1024:
        await context.bot.send_photo(
            chat_id=update.message.chat_id,
            photo=image_data,
            caption=f"üì∑ –ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}"
        )
    else:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")

async def search_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –∫–æ—Ç–∏–∫–∞"""
    query = random.choice(CAT_PROMPTS)
    
    await update.message.reply_text(f"üê± –ò—â—É –∫–æ—Ç–∏–∫–∞: {query}")
    
    image_data = await image_searcher.search_image(query)
    
    if image_data and len(image_data) > 1024:
        await context.bot.send_photo(
            chat_id=update.message.chat_id,
            photo=image_data,
            caption=f"üêæ –ù–∞–π–¥–µ–Ω –∫–æ—Ç–∏–∫: {query}"
        )
    else:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ç–∏–∫–∞ :(")

async def force_daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞"""
    try:
        if GROUP_CHAT_ID == "-1001234567890":
            await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return
        
        await update.message.reply_text("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞...")
        await send_daily_image(context)
        await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def set_post_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    global POST_TIME, current_job
    
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è: /set_time –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: /set_time 09:30")
        return
    
    try:
        time_str = context.args[0]
        hours, minutes = map(int, time_str.split(':'))
        
        if not (0 <= hours < 24 and 0 <= minutes < 60):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        POST_TIME = time(hour=hours, minute=minutes)
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º job —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
        job_queue = context.application.job_queue
        if job_queue and current_job:
            current_job.schedule_removal()
        
        current_job = job_queue.run_daily(
            send_daily_image,
            time=POST_TIME,
            days=tuple(range(7)),
            name="daily_art_job"
        )
        
        await update.message.reply_text(f"‚úÖ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {time_str}")
        logger.info(f"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {time_str}")
        
    except (ValueError, IndexError):
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: /set_time 09:30")

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    settings_text = f"""
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:*

‚Ä¢ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: `{POST_TIME.strftime('%H:%M')}`
‚Ä¢ ID –≥—Ä—É–ø–ø—ã: `{'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if GROUP_CHAT_ID != '-1001234567890' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`
‚Ä¢ –ü–æ–∏—Å–∫–æ–≤–∏–∫: `–Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∏–Ω–∫–∏`
‚Ä¢ –ü—Ä–æ–º–ø—Ç–æ–≤: `{len(PROMPTS + CAT_PROMPTS)}`

*–ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫:*
/set_time –ß–ß:–ú–ú - –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
/set_group ID - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã
    """
    await update.message.reply_text(settings_text, parse_mode='Markdown')

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞"""
    chat_info = f"""
üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:*

‚Ä¢ ID: `{update.message.chat_id}`
‚Ä¢ –¢–∏–ø: `{update.message.chat.type}`
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: `{update.message.chat.title or '–õ–∏—á–Ω—ã–π —á–∞—Ç'}`

üí° *–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä—É–ø–ø—ã:*
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
2. –ù–∞–ø–∏—à–∏—Ç–µ `/chat_id` –≤ –≥—Ä—É–ø–ø–µ
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –≥—Ä—É–ø–ø—ã
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/set_group ID_–≥—Ä—É–ø–ø—ã`
    """
    await update.message.reply_text(chat_info, parse_mode='Markdown')

async def set_group_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã"""
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã: /set_group <group_id>")
        return
    
    global GROUP_CHAT_ID
    GROUP_CHAT_ID = context.args[0]
    await update.message.reply_text(f"‚úÖ ID –≥—Ä—É–ø–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{GROUP_CHAT_ID}`", parse_mode='Markdown')

async def bot_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    status_text = f"""
üìä *–°—Ç–∞—Ç—É—Å –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∏–Ω–∫–∏ –ë–æ—Ç–∞:*

‚Ä¢ üü¢ –û–Ω–ª–∞–π–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ ‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {POST_TIME.strftime('%H:%M')}
‚Ä¢ üìù –ü—Ä–æ–º–ø—Ç–æ–≤: {len(PROMPTS + CAT_PROMPTS)}
‚Ä¢ üë• –ì—Ä—É–ø–ø–∞: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' if GROUP_CHAT_ID != '-1001234567890' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}
‚Ä¢ üñº –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: {sent_count}
‚Ä¢ üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {last_sent_time.strftime('%d.%m.%Y %H:%M') if last_sent_time else '–ù–∏–∫–æ–≥–¥–∞'}

*üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –ü–æ–∏—Å–∫–æ–≤–∏–∫: –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∏–Ω–∫–∏
‚Ä¢ ID –≥—Ä—É–ø–ø—ã: `{GROUP_CHAT_ID}`
    """
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def post_init(application: Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    global current_job
    
    try:
        job_queue = application.job_queue
        if job_queue:
            # –°–æ–∑–¥–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É
            current_job
