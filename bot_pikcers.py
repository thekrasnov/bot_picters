import logging
import random
from datetime import datetime, time
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
import io
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "6387413984:AAGUMwJlOidPoKZ3_m1PgFYq1fB0j5yoxDM"
# ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô!)
GROUP_CHAT_ID = "-1001234567890"

# –°–ø–∏—Å–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
PROMPTS = [
    "–ö—Ä–∞—Å–∏–≤—ã–π –ø–µ–π–∑–∞–∂ —Å –≥–æ—Ä–∞–º–∏ –∏ –æ–∑–µ—Ä–æ–º",
    "–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ —Å –Ω–µ–æ–Ω–æ–≤—ã–º–∏ –æ–≥–Ω—è–º–∏",
    "–ú–∏–ª—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –≤ –ø—Ä–∏—Ä–æ–¥–Ω–æ–π —Å—Ä–µ–¥–µ",
    "–ö–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å –ø–ª–∞–Ω–µ—Ç–∞–º–∏",
    "–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ —Å —è—Ä–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏",
    "–°—Ç–∞—Ä–∏–Ω–Ω—ã–π –∑–∞–º–æ–∫ –≤ —Ç—É–º–∞–Ω–µ",
    "–ü–æ–¥–≤–æ–¥–Ω—ã–π –º–∏—Ä —Å –∫–æ—Ä–∞–ª–ª–∞–º–∏",
    "–û—Å–µ–Ω–Ω–∏–π –ª–µ—Å —Å –∑–æ–ª–æ—Ç—ã–º–∏ –ª–∏—Å—Ç—å—è–º–∏",
    "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –ª–µ—Å —Å–æ —Å–≤–µ—Ç—è—â–∏–º–∏—Å—è —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏",
    "–ì–æ—Ä–Ω—ã–π –≤–æ–¥–æ–ø–∞–¥ –≤ —Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å"
]

CAT_PROMPTS = [
    "–ú–∏–ª—ã–π –ø—É—à–∏—Å—Ç—ã–π –∫–æ—Ç–µ–Ω–æ–∫ –∏–≥—Ä–∞–µ—Ç —Å –∫–ª—É–±–∫–æ–º",
    "–í–µ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ç –Ω–∞ —Ç—Ä–æ–Ω–µ –≤ –∫–æ—Ä–æ–ª–µ–≤—Å–∫–æ–º —Å—Ç–∏–ª–µ",
    "–°–ø—è—â–∏–π –∫–æ—Ç –≤ —É—é—Ç–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–µ",
    "–ö–æ—Ç —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∑–µ–ª–µ–Ω—ã–º–∏ –≥–ª–∞–∑–∞–º–∏",
    "–ò–≥—Ä–∏–≤—ã–π –∫–æ—Ç–µ–Ω–æ–∫ –≥–æ–Ω—è–µ—Ç—Å—è –∑–∞ –±–∞–±–æ—á–∫–æ–π –≤ —Å–∞–¥—É",
    "–ö–æ—Ç –≤ –∫—Ä–æ—à–µ—á–Ω–æ–π –∫–æ—Ä–æ–Ω–µ –≤ —Ñ—ç–Ω—Ç–µ–∑–∏ —Å—Ç–∏–ª–µ",
    "–ì—Ä—É–ø–ø–∞ –∫–æ—Ç—è—Ç –ø—Ä–∏–∂–∏–º–∞–µ—Ç—Å—è –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É",
    "–ö–æ—Ç –∏—Å—Å–ª–µ–¥—É–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–π –ª–µ—Å",
    "–ö–æ—Ç —Å –∫—Ä—ã–ª—å—è–º–∏ –≤ –∞–Ω–≥–µ–ª—å—Å–∫–æ–º —Å—Ç–∏–ª–µ",
    "–ö–æ—Ç –≤ —Å–∫–∞—Ñ–∞–Ω–¥—Ä–µ –≤ –Ω–∞—É—á–Ω–æ-—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–µ"
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_SETTINGS = {
    "auto_post": True,
    "post_time": "09:00",
    "image_quality": "high"
}

class SimpleImageGenerator:
    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Pillow
        self.has_pillow = self._check_pillow()
        
    def _check_pillow(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Pillow"""
        try:
            from PIL import Image, ImageDraw
            return True
        except ImportError:
            logger.warning("Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")
            return False
    
    async def generate_image(self, prompt: str, style: str = "default") -> bytes:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            if self.has_pillow and style == "cat":
                return await self._create_cat_image(prompt)
            elif self.has_pillow:
                return await self._create_default_image(prompt)
            else:
                return await self._create_simple_image(prompt)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return await self._create_simple_image(prompt)
    
    async def _create_default_image(self, prompt: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Pillow"""
        try:
            from PIL import Image, ImageDraw
            
            img = Image.new('RGB', (512, 512), color=(
                random.randint(0, 255),
                random.randint(0, 255),
                random.randint(0, 255)
            ))
            
            draw = ImageDraw.Draw(img)
            
            # –ü—Ä–æ—Å—Ç–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
            for i in range(512):
                r = int(i / 512 * 255)
                g = random.randint(0, 255)
                b = 255 - int(i / 512 * 255)
                draw.line([(0, i), (512, i)], fill=(r, g, b), width=1)
            
            img_byte_arr = io.BytesIO()
            img.save(img_byte_arr, format='PNG')
            return img_byte_arr.getvalue()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return await self._create_simple_image(prompt)
    
    async def _create_cat_image(self, prompt: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ—Ç–∏–∫–æ–º"""
        try:
            from PIL import Image, ImageDraw
            
            img = Image.new('RGB', (512, 512), color=(
                random.randint(200, 255),
                random.randint(180, 220),
                random.randint(150, 200)
            ))
            
            draw = ImageDraw.Draw(img)
            
            # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞
            draw.ellipse([150, 150, 350, 350], fill=(200, 150, 100), outline=(0, 0, 0), width=3)
            draw.ellipse([175, 100, 325, 200], fill=(200, 150, 100), outline=(0, 0, 0), width=3)
            draw.ellipse([200, 125, 225, 150], fill=(0, 0, 0))
            draw.ellipse([275, 125, 300, 150], fill=(0, 0, 0))
            draw.ellipse([237, 160, 263, 170], fill=(255, 150, 150))
            
            img_byte_arr = io.BytesIO()
            img.save(img_byte_arr, format='PNG')
            return img_byte_arr.getvalue()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ç–∏–∫–∞: {e}")
            return await self._create_default_image(prompt)
    
    async def _create_simple_image(self, prompt: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∞–º–æ–µ –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π bytes
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        return b''

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
image_generator = SimpleImageGenerator()

# ========== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==========

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    welcome_text = """
üé® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê—Ä—Ç-–ë–æ—Ç!*

–Ø –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00.

üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/help - –í—Å–µ –∫–æ–º–∞–Ω–¥—ã
/test - –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
/cat - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ç–∏–∫–∞
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/chat_id - –ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
/set_group - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

–ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
üìñ *–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

üé® *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è:*
/test - –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
/cat - –ú–∏–ª—ã–µ –∫–æ—Ç–∏–∫–∏ üê±

‚öôÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/chat_id - ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
/set_group <id> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã

üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

‚ùì *–ü—Ä–∏–º–µ—Ä—ã:*
/test
/cat
/set_group -1001234567890
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def test_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"""
    await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    prompt = random.choice(PROMPTS)
    image_data = await image_generator.generate_image(prompt)
    
    if image_data:
        await context.bot.send_photo(
            chat_id=update.message.chat_id,
            photo=image_data,
            caption=f"üñº –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\nüìù {prompt}"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

async def generate_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ç–∏–∫–∞"""
    await update.message.reply_text("üê± –ì–µ–Ω–µ—Ä–∏—Ä—É—é –º–∏–ª–æ–≥–æ –∫–æ—Ç–∏–∫–∞...")
    
    prompt = random.choice(CAT_PROMPTS)
    image_data = await image_generator.generate_image(prompt, "cat")
    
    if image_data:
        await context.bot.send_photo(
            chat_id=update.message.chat_id,
            photo=image_data,
            caption=f"üêæ –ú—É—Ä-–º—è—É!\nüìù {prompt}"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ç–∏–∫–∞")

async def show_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    settings_text = f"""
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:*

‚Ä¢ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: {'‚úÖ –í–∫–ª' if BOT_SETTINGS['auto_post'] else '‚ùå –í—ã–∫–ª'}
‚Ä¢ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {BOT_SETTINGS['post_time']}
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {BOT_SETTINGS['image_quality']}
‚Ä¢ ID –≥—Ä—É–ø–ø—ã: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if GROUP_CHAT_ID != '-1001234567890' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}

*–ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫:*
/set_group <id> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã
    """
    await update.message.reply_text(settings_text, parse_mode='Markdown')

async def bot_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    status_text = f"""
üìä *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:*

‚Ä¢ üü¢ –û–Ω–ª–∞–π–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚Ä¢ ‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤: {BOT_SETTINGS['post_time']}
‚Ä¢ üìù –ü—Ä–æ–º–ø—Ç–æ–≤: {len(PROMPTS)}
‚Ä¢ üê± –ö–æ—Ç–∏–∫–æ–≤: {len(CAT_PROMPTS)}
‚Ä¢ üë• –ì—Ä—É–ø–ø–∞: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞' if GROUP_CHAT_ID != '-1001234567890' else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞'}
‚Ä¢ üñº Pillow: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if image_generator.has_pillow else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}

–í–µ—Ä—Å–∏—è: 1.0
    """
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞"""
    chat_info = f"""
üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:*

‚Ä¢ ID: `{update.message.chat_id}`
‚Ä¢ –¢–∏–ø: `{update.message.chat.type}`
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: `{update.message.chat.title or '–õ–∏—á–Ω—ã–π —á–∞—Ç'}`

üí° *–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä—É–ø–ø—ã:*
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
2. –ù–∞–ø–∏—à–∏—Ç–µ `/chat_id` –≤ –≥—Ä—É–ø–ø–µ
3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –≥—Ä—É–ø–ø—ã
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/set_group <ID_–≥—Ä—É–ø–ø—ã>`
    """
    await update.message.reply_text(chat_info, parse_mode='Markdown')

async def set_group_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã"""
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã: /set_group <group_id>")
        return
    
    global GROUP_CHAT_ID
    GROUP_CHAT_ID = context.args[0]
    await update.message.reply_text(f"‚úÖ ID –≥—Ä—É–ø–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{GROUP_CHAT_ID}`", parse_mode='Markdown')

async def send_daily_image(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    try:
        if GROUP_CHAT_ID == "-1001234567890":
            logger.error("‚ùå ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return
        
        prompt = random.choice(PROMPTS + CAT_PROMPTS)
        image_data = await image_generator.generate_image(prompt, "cat" if "–∫–æ—Ç" in prompt.lower() else "default")
        
        if image_data:
            await context.bot.send_photo(
                chat_id=GROUP_CHAT_ID,
                photo=image_data,
                caption=f"üé® –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ!\nüìÖ {datetime.now().strftime('%d.%m.%Y')}\nüìù {prompt}"
            )
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {GROUP_CHAT_ID}")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É: {e}")

async def force_daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É"""
    await update.message.reply_text("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É...")
    await send_daily_image(context)
    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    stats_text = """
üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*

‚Ä¢ üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: 0
‚Ä¢ üìä –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: 0
‚Ä¢ ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 0 —á–∞—Å–æ–≤
‚Ä¢ üéØ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫: 0
‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: 0

*üìù –ü—Ä–æ–º–ø—Ç—ã:*
‚Ä¢ –û–±—ã—á–Ω—ã–µ: {len(PROMPTS)}
‚Ä¢ –ö–æ—Ç–∏–∫–∏: {len(CAT_PROMPTS)}
    """
    await update.message.reply_text(stats_text, parse_mode='Markdown')

async def show_version(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–µ—Ä—Å–∏—è –±–æ—Ç–∞"""
    await update.message.reply_text("ü§ñ *–í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 2.0*\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 2024", parse_mode='Markdown')

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("test", test_image))
        application.add_handler(CommandHandler("cat", generate_cat))
        application.add_handler(CommandHandler("settings", show_settings))
        application.add_handler(CommandHandler("status", bot_status))
        application.add_handler(CommandHandler("chat_id", get_chat_id))
        application.add_handler(CommandHandler("set_group", set_group_id))
        application.add_handler(CommandHandler("daily", force_daily))
        application.add_handler(CommandHandler("stats", show_stats))
        application.add_handler(CommandHandler("version", show_version))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É
        job_queue = application.job_queue
        if job_queue:
            job_queue.run_daily(
                send_daily_image,
                time=time(hour=9, minute=0, second=0),
                days=tuple(range(7)),
                name="daily_art_job"
            )
            logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ 9:00")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("üé® –ê—Ä—Ç-–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("   /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        print("   /help - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
        print("   /test - –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        print("   /cat - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—Ç–∏–∫–∞")
        print("   /chat_id - –ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞")
        print("   /set_group - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã")
        print("   /status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
        
        application.run_polling()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Pillow
    try:
        from PIL import Image, ImageDraw
        print("‚úÖ Pillow —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ö†Ô∏è  Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pillow")
        print("‚ö†Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞")
    
    main()
