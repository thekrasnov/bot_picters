import logging
import asyncio
import aiohttp
import random
import json
from datetime import datetime, time
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackContext
import io
from PIL import Image, ImageDraw
import time as time_module
import base64
from io import BytesIO
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "6387413984:AAGUMwJlOidPoKZ3_m1PgFYq1fB0j5yoxDM"
# ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat_id –≤ –≥—Ä—É–ø–ø–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å)
GROUP_CHAT_ID = "-1001234567890"  # –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û–¢ ID!

# –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
PROMPTS = [
    "A majestic cat in the snow, photorealistic, high detail",
    "Beautiful landscape with mountains and lake, digital art",
    "Futuristic city with neon lights, cyberpunk style",
    "Cute animals in natural environment, high quality",
    "Cosmic space with planets and stars, vibrant colors",
]

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–æ—Ç–∏–∫–æ–≤
CAT_PROMPTS = [
    "Cute fluffy kitten playing with yarn, photorealistic",
    "Majestic cat sitting on a throne, royal style",
    "Sleeping cat in a cozy basket, warm lighting",
    "Cat with beautiful green eyes, detailed fur",
    "Playful kitten chasing a butterfly in garden",
]

class ImageGenerator:
    def __init__(self):
        pass
    
    async def generate_image(self, prompt: str, is_cat: bool = False) -> bytes:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            return await self._create_cat_image(prompt) if is_cat else await self._create_fallback_image(prompt)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return await self._create_fallback_image(prompt)
    
    async def _create_fallback_image(self, prompt: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        img = Image.new('RGB', (512, 512), color=(random.randint(0, 255), 
                                                   random.randint(0, 255), 
                                                   random.randint(0, 255)))
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format='PNG')
        return img_byte_arr.getvalue()
    
    async def _create_cat_image(self, prompt: str) -> bytes:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ—Ç–∏–∫–æ–º"""
        try:
            img = Image.new('RGB', (512, 512), color=(random.randint(200, 255), 
                                                       random.randint(180, 220), 
                                                       random.randint(150, 200)))
            
            draw = ImageDraw.Draw(img)
            self._draw_cat(draw)
            
            img_byte_arr = io.BytesIO()
            img.save(img_byte_arr, format='PNG')
            return img_byte_arr.getvalue()
            
        except Exception as e:
            logger.error(f"Error creating cat image: {e}")
            return await self._create_fallback_image(prompt)
    
    def _draw_cat(self, draw: ImageDraw.Draw):
        """–†–∏—Å—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞"""
        # –¢–µ–ª–æ –∫–æ—Ç–∏–∫–∞
        draw.ellipse([150, 150, 350, 350], fill=(200, 150, 100), outline=(0, 0, 0), width=3)
        # –ì–æ–ª–æ–≤–∞
        draw.ellipse([175, 100, 325, 200], fill=(200, 150, 100), outline=(0, 0, 0), width=3)
        # –ì–ª–∞–∑–∞
        draw.ellipse([200, 125, 225, 150], fill=(0, 0, 0))
        draw.ellipse([275, 125, 300, 150], fill=(0, 0, 0))
        # –ù–æ—Å
        draw.ellipse([237, 160, 263, 170], fill=(255, 150, 150))
        # –£—Å—ã
        for i in range(3):
            draw.line([(225, 165), (175, 155 + i*10)], fill=(0, 0, 0), width=1)
            draw.line([(275, 165), (325, 155 + i*10)], fill=(0, 0, 0), width=1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
image_generator = ImageGenerator()

async def send_daily_image(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ ID –≥—Ä—É–ø–ø—ã
        if GROUP_CHAT_ID == "-1001234567890":
            logger.error("‚ùå ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat_id –≤ –≥—Ä—É–ø–ø–µ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID")
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = random.choice(PROMPTS)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã: {prompt}")
        image_data = await image_generator.generate_image(prompt)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        await context.bot.send_photo(
            chat_id=GROUP_CHAT_ID,
            photo=image_data,
            caption=f"üé® –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ!\n"
                   f"üìÖ {datetime.now().strftime('%d.%m.%Y')}\n"
                   f"üìù {prompt}\n\n"
                   f"#–∏—Å–∫—É—Å—Å—Ç–≤–æ #–Ω–µ–π—Ä–æ—Å–µ—Ç—å #–µ–∂–µ–¥–Ω–µ–≤–Ω–æ"
        )
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {GROUP_CHAT_ID}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ start"""
    await update.message.reply_text(
        "üé® –ë–æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞!\n\n"
        "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00 —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/test_image - —Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–æ—Ç–∏–∫–æ–º üê±\n"
        "/test_group - —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É\n"
        "/chat_id - –ø–æ–∫–∞–∑–∞—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞\n"
        "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/set_group - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –≥—Ä—É–ø–ø—ã"
    )

async def test_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–æ—Ç–∏–∫–æ–º"""
    await update.message.reply_text("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ—Ç–∏–∫–æ–º... üê±")
    
    prompt = random.choice(CAT_PROMPTS)
    image_data = await image_generator.generate_image(prompt, is_cat=True)
    
    await context.bot.send_photo(
        chat_id=update.message.chat_id,
        photo=image_data,
        caption=f"üê± –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ—Ç–∏–∫–æ–º!\nüìù {prompt}"
    )

async def test_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É"""
    try:
        if GROUP_CHAT_ID == "-1001234567890":
            await update.message.reply_text("‚ùå ID –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat_id –≤ –≥—Ä—É–ø–ø–µ")
            return
        
        await update.message.reply_text("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –≥—Ä—É–ø–ø—É...")
        
        prompt = "–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã"
        image_data = await image_generator.generate_image(prompt)
        
        await context.bot.send_photo(
            chat_id=GROUP_CHAT_ID,
            photo=image_data,
            caption=f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞\nüìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É!")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
    chat_id = update.message.chat_id
    chat_type = update.message.chat.type
    chat_title = update.message.chat.title or "–õ–∏—á–Ω—ã–π —á–∞—Ç"
    
    message = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\n"
        f"ID: `{chat_id}`\n"
        f"–¢–∏–ø: {chat_type}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}\n\n"
        f"üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –∫–æ–¥–µ –∫–∞–∫ GROUP_CHAT_ID"
    )
    
    await update.message.reply_text(message, parse_mode='Markdown')

async def set_group_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ID –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    try:
        if context.args:
            global GROUP_CHAT_ID
            GROUP_CHAT_ID = context.args[0]
            await update.message.reply_text(f"‚úÖ ID –≥—Ä—É–ø–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {GROUP_CHAT_ID}")
        else:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã: /set_group <group_id>")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    group_status = "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω" if GROUP_CHAT_ID != "-1001234567890" else "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    await update.message.reply_text(
        f"üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n"
        f"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n"
        f"‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ 9:00\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {group_status}\n"
        f"üé® –ü—Ä–æ–º–ø—Ç–æ–≤: {len(PROMPTS)}\n"
        f"üê± –ö–æ—Ç–∏–∫–æ–≤: {len(CAT_PROMPTS)}\n"
        f"üìã ID –≥—Ä—É–ø–ø—ã: {GROUP_CHAT_ID}"
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("test_image", test_image))
        application.add_handler(CommandHandler("test_group", test_group))
        application.add_handler(CommandHandler("chat_id", get_chat_id))
        application.add_handler(CommandHandler("set_group", set_group_id))
        application.add_handler(CommandHandler("status", status))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É
        job_queue = application.job_queue
        if job_queue:
            job_queue.run_daily(
                send_daily_image,
                time=time(hour=9, minute=0, second=0),
                days=tuple(range(7)),
                name="daily_art_job"
            )
            logger.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ 9:00")
        else:
            logger.warning("‚ö†Ô∏è JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("üé® –ë–æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∑–∞–ø—É—â–µ–Ω!")
        print("‚ö†Ô∏è  –í–ê–ñ–ù–û: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ ID –≥—Ä—É–ø–ø—ã!")
        print("üìã –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –≥—Ä—É–ø–ø–µ –∫–æ–º–∞–Ω–¥—É /chat_id —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID –≥—Ä—É–ø–ø—ã")
        print("üíª –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GROUP_CHAT_ID –≤ –∫–æ–¥–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_group")
        print("üê± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_image –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ—Ç–∏–∫–∞")
        print("üß™ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /test_group –¥–ª—è —Ç–µ—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É")
        
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
